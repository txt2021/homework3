Задача 1.1
В этом задании надо последовательно ответить на несколько вопросов:


1. Чем контейнер отличается от образа? 
- Легковесный исполняемый пакет софта, который включает в себя всё необходимое для запуска приложения. 
Контейнер изолирован от окружения и может запускаться на любой машине где есть докер.
Контейнеры создаються из образов. 

2. Сколько контейнеров можно сделать от одного образа?
-Из одного образа можно создать сколько угодно контейнеров.

3. Для чего используется ключ -p в команде docker run
- Publish a container's port(s) to the host

4. Почему не бывает образов с операционной системой Windows и MacOS внутри?
- Докер это технология жестко завязаная на линук системе. Любой контейнер который запускается обычно содержит в себе дистрибутив линукса.

5. Где находится информация, которая хранится в томе (docker volume)?
- Информация хранится в недрах докер демона, путь до неё чаще всего не известен
Не связан с конкретной машиной и продолжает хранить данные даже если выключится.

6. Как запустить контейнер так, чтобы он видел содержимое какой-то директории на хост-машине, но не мог ее изменить?
- Использовать ключ readonly при bind подключении




Задача 1.2
В этой задаче надо выполнить несколько последовательных шагов:


1. Запустить контейнер Ubuntu с detached флагом.

2. Найти запущенный контейнер в списке контейнеров.

3. Подключиться к нему.

4. Выйти из него командой exit (тем самым остановив контейнер).

5. Снова найти контейнер в списке контейнеров.

6. Запустить его.

7. Подключиться к нему.

8. Выйти из контейнера, не остановив его.

9. Найти запущенный контейнер в списке.

10. Остановить его.

11. Удалить его из списка.


Результат: указать 11 последовательных команд, которые вы сделали для прохождения этого флоу.
1. docker run -it -d ubuntu bash
2. docker container ls
3. docker container attach 07e3fdc38184
4. exit
5. docker container ls -a
6. docker container start 1a3127d16e29
7. docker container attach 1a3127d16e29
8. Ctrl + p, Ctrl + q
9. docker container ls
10. docker container stop laughing_kare
11. docker container rm laughing_kare




Задача 1.3
В этой задаче надо выполнить несколько последовательных шагов:


1. Создать том с названием my_homework_volume

2. Запустить контейнер Ubuntu с названием container_1 и подключенным к нему томом.

3. Оказавшись внутри контейнера container_1, перейти в директорию тома и создать там файл hello.txt без содержимого. Для этого используйте команду touch [название файла].

4. Выйти из контейнера.

5. Создать второй контейнер Ubuntu с названием container_2 и с тем же подключенным томом.

6. Оказавшись внутри контейнера container_2, перейти в директорию тома и найти там файл hello.txt (команда ls). Удалить файл командой rm.

7. Выйти из контейнера container_2 и вернуться в container_1. Перейдя в директорию с томом при помощи команды ls проверить наличие созданного файла hello.txt.

8. Выйти из контейнера.

9. Попытаться удалить том, выполнив команду docker volume rm my_homework_volume


Результатом должны быть ответы на все три вопроса:

 
1. Удалось ли найти созданный файл hello.txt внутри container_1 после того, как вы удалили файл внутри container_2? 
-Нет

2. Какая ошибка возникла при попытке удалить том? 
-Том невозможно удалить, так как он используется

3. Что необходимо сделать, чтобы том был удален? 
-Удалить все контейнеры к которым был подключен том, даже остановленные




Задача 1.4
Есть код на языке PHP:

 
<?php foreach ([1,2,3] as $i) {echo $i . PHP_EOL;}

 
Этот код необходимо скопировать и положить в файл counter.php

После чего необходимо скачать два образа:

 
docker pull php:5.3-cli

docker pull php:5.6-cli


После чего необходимо запустить программу на php в обоих контейнерах и проверить ее работоспособность. 
Для одного из контейнеров программа сломается - это ожидаемо.


Для запуска программы на PHP используйте следующую команду:

php counter.php


Результатом должны быть ответы на все три вопроса:


1. Какой тип mount выбрали - bind или volume? Почему?
-bind так как подключила папку на локальном диске, в которую был помещен файл php

2. Что вывела программа, запущенная внутри контейнера версии 5.3?
-Parse error: syntax error, unexpected '[' in /bind/counter.php on line 1

3. Что вывела программа, запущенная внутри контейнера версии 5.6?
-1
 2
 3



Задача 1.5
Необходимо сделать свой собственный hello-world образ и выложить его в свой репозиторий на Docker Hub.


При запуске контейнера должно писаться следующее:

Hello from [Ваше Имя]

После чего контейнер должен останавливаться.

Для того, чтобы выводить сообщение используйте команду echo.

 
Результат: ссылка на образ в вашем Docker Hub. Репозиторий должен быть публичным, чтобы была возможность сделать pull вашего образа.
-https://hub.docker.com/repository/docker/txt2021/hello-world
